import asyncio
import json
import logging
import os
import subprocess
import sys
from math import ceil

import aiogram.exceptions
import psutil
import pyautogui
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command, CommandStart
from aiogram.types import BotCommand, CallbackQuery, InlineKeyboardButton, Message, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
import keyboard
import ctypes
import time
import win32gui
import win32con
import win32process
import re
from pathlib import Path
import configparser
import urllib.parse
from typing import Optional, List

# ==========================
# –ë–ê–ó–û–í–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê
# ==========================

def get_app_dir() -> Path:
    if getattr(sys, 'frozen', False):
        return Path(sys.executable).resolve().parent
    return Path(__file__).resolve().parent

APP_DIR = get_app_dir()

CONFIG_PATH = APP_DIR / 'config.ini'
config = configparser.ConfigParser()

if not CONFIG_PATH.exists():
    logging.info("–§–∞–π–ª config.ini –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—é —à–∞–±–ª–æ–Ω...")
    config['Settings'] = {
        'TELEGRAM_BOT_TOKEN': 'YOUR_TOKEN_HERE',
        'USER_ID': '0',
        'DEFAULT_SEARCH_ENGINE': 'google',
        'PREFERRED_SEARCH_BROWSER_KEY': ''
    }
    with open(CONFIG_PATH, 'w', encoding='utf-8') as configfile:
        config.write(configfile)
    logging.info(f"–®–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω –≤ {CONFIG_PATH}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ.")

try:
    config.read(CONFIG_PATH, encoding='utf-8')
    BOT_TOKEN = config.get('Settings', 'TELEGRAM_BOT_TOKEN')
    USER_ID = config.getint('Settings', 'USER_ID')
    DEFAULT_SEARCH_ENGINE = config.get('Settings', 'DEFAULT_SEARCH_ENGINE', fallback='google')
    PREFERRED_SEARCH_BROWSER_KEY = config.get('Settings', 'PREFERRED_SEARCH_BROWSER_KEY', fallback='').strip()
except (configparser.Error, ValueError) as e:
    logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.ini: {e}")
    sys.exit(1)

if BOT_TOKEN == "YOUR_TOKEN_HERE" or USER_ID == 0:
    logging.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à TELEGRAM_BOT_TOKEN –∏ USER_ID –≤ —Ñ–∞–π–ª–µ config.ini")
    sys.exit(1)

SEARCH_ENGINES = {
    'yandex': 'https://yandex.ru/search/?text=',
    'google': 'https://www.google.com/search?q=',
    'bing': 'https://www.bing.com/search?q='
}
if DEFAULT_SEARCH_ENGINE not in SEARCH_ENGINES:
    logging.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ DEFAULT_SEARCH_ENGINE: {DEFAULT_SEARCH_ENGINE}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'google'.")
    DEFAULT_SEARCH_ENGINE = 'google'
    config.set('Settings', 'DEFAULT_SEARCH_ENGINE', 'google')
    with open(CONFIG_PATH, 'w', encoding='utf-8') as configfile:
        config.write(configfile)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_data = {
    'mode': 'inline',
    'apps_page': 0,
    'combos_page': 0,
    'search_engine': DEFAULT_SEARCH_ENGINE,
    'preferred_search_browser_key': PREFERRED_SEARCH_BROWSER_KEY if PREFERRED_SEARCH_BROWSER_KEY else None
}
toggle_state = {}
active_inline_menus = {}

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞ (—á–µ—Ä–µ–∑ Xbox Game Bar)
record_state = {
    'active': False,
    'started_at': 0.0
}
last_clip_by_user: dict[int, Optional[Path]] = {}

# ==========================
# –î–ê–ù–ù–´–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ô / –ö–û–ú–ë–û
# ==========================

def load_data(filename: str):
    path = APP_DIR / filename
    try:
        with open(path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
        return []

APPS_JSON_PATH = APP_DIR / 'apps.json'
COMBOS_JSON_PATH = APP_DIR / 'combos.json'
apps_data = load_data('apps.json')
combos_data = load_data('combos.json')

def has_access(message: types.Message):
    return message.from_user.id == USER_ID

# ==========================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ==========================

def get_main_keyboard():
    buttons = [
        [types.KeyboardButton(text="üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è")],
        [types.KeyboardButton(text="‚å®Ô∏è –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏")],
        [types.KeyboardButton(text="üñ• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_controls_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="Up", callback_data="media_page_up")
    builder.button(text="‚¨ÜÔ∏è", callback_data="media_arrow_up")
    builder.button(text="Dn", callback_data="media_page_down")
    builder.button(text="‚¨ÖÔ∏è", callback_data="media_arrow_left")
    builder.button(text="‚¨áÔ∏è", callback_data="media_arrow_down")
    builder.button(text="‚û°Ô∏è", callback_data="media_arrow_right")
    builder.button(text="‚å®Ô∏è", callback_data="media_switch_reply")
    builder.button(text="‚éµ", callback_data="media_space")
    builder.button(text="üîâ", callback_data="media_volume_down")
    builder.button(text="üîá", callback_data="media_volume_mute")
    builder.button(text="üîä", callback_data="media_volume_up")
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞–º–∏ (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ–¥–∏–∞-–∫–ª–∞–≤–∏—à–∏)
    builder.button(text="‚èÆ", callback_data="media_prev")
    builder.button(text="‚èØ", callback_data="media_play_pause")
    builder.button(text="‚è≠", callback_data="media_next")
    builder.adjust(3, 3, 2, 3, 3)
    return builder.as_markup()

def get_controls_reply_keyboard():
    buttons = [
        ["Up", "‚¨ÜÔ∏è", "Dn"],
        ["‚¨ÖÔ∏è", "‚¨áÔ∏è", "‚û°Ô∏è"],
        ["‚å®Ô∏è", "‚éµ"],
        ["üîâ", "üîá", "üîä"],
        ["‚èÆ", "‚èØ", "‚è≠"]
    ]
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=b) for b in row] for row in buttons],
        resize_keyboard=True
    )

# ==========================
# –•–ï–ù–î–õ–ï–†–´ ¬´–£–ü–†–ê–í–õ–ï–ù–ò–ï¬ª
# ==========================

@dp.message(F.text == "üñ• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def show_controls(message: Message):
    if not has_access(message):
        return
    sent_message = await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∞–º–∏:", reply_markup=get_controls_keyboard())
    user_id = message.from_user.id
    category = 'media'
    if user_id not in active_inline_menus:
        active_inline_menus[user_id] = {'apps': [], 'combos': [], 'media': []}
    active_inline_menus[user_id][category].append(sent_message.message_id)
    if len(active_inline_menus[user_id][category]) > 2:
        oldest_msg_id = active_inline_menus[user_id][category].pop(0)
        try:
            await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=oldest_msg_id, reply_markup=None)
        except aiogram.exceptions.TelegramBadRequest:
            pass

@dp.callback_query(F.data == "media_switch_reply")
async def switch_to_reply_controls(callback: CallbackQuery):
    user_data['mode'] = 'media_reply'
    await callback.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏—à–∞–º–∏ (reply):", reply_markup=get_controls_reply_keyboard())
    await callback.answer()

@dp.message(F.text.in_(["Up", "‚¨ÜÔ∏è", "Dn", "‚¨ÖÔ∏è", "‚¨áÔ∏è", "‚û°Ô∏è", "‚éµ", "üîâ", "üîá", "üîä", "‚èÆ", "‚èØ", "‚è≠"]))
async def handle_controls_reply(message: Message):
    if user_data.get('mode') != 'media_reply':
        return
    t = message.text
    try:
        if t == "Up":
            keyboard.send('page up')
        elif t == "Dn":
            keyboard.send('page down')
        elif t == "‚¨ÜÔ∏è":
            keyboard.send('up')
        elif t == "‚¨áÔ∏è":
            keyboard.send('down')
        elif t == "‚¨ÖÔ∏è":
            keyboard.send('left')
        elif t == "‚û°Ô∏è":
            keyboard.send('right')
        elif t == "‚éµ":
            keyboard.send('space')
        elif t == "üîâ":
            volume_down()
        elif t == "üîä":
            volume_up()
        elif t == "üîá":
            volume_mute()
        elif t == "‚èÆ":
            media_prev()
        elif t == "‚èØ":
            media_play_pause()
        elif t == "‚è≠":
            media_next()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ '{t}': {e}")

@dp.callback_query(F.data.startswith("media_"))
async def process_controls(callback: CallbackQuery):
    action = callback.data[len("media_"):]
    if action == "switch_reply":
        return
    try:
        if action == "arrow_left":
            keyboard.send('left')
        elif action == "arrow_right":
            keyboard.send('right')
        elif action == "arrow_up":
            keyboard.send('up')
        elif action == "arrow_down":
            keyboard.send('down')
        elif action == "page_up":
            keyboard.send('page up')
        elif action == "page_down":
            keyboard.send('page down')
        elif action == "space":
            keyboard.send('space')
        elif action == "volume_up":
            volume_up()
        elif action == "volume_down":
            volume_down()
        elif action == "volume_mute":
            volume_mute()
        elif action == "prev":
            media_prev()
        elif action == "play_pause":
            media_play_pause()
        elif action == "next":
            media_next()
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)
            return
        await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

@dp.message(F.text == "‚å®Ô∏è")
async def switch_to_inline_controls(message: Message):
    if user_data.get('mode') == 'media_reply':
        user_data['mode'] = 'inline'
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

# ==========================
# –ë–ê–ó–û–í–´–ï –•–ï–ù–¥–õ–ï–†–´
# ==========================

@dp.message(CommandStart())
async def send_welcome(message: Message):
    if not has_access(message):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö –∑–∞–ø—É—â–µ–Ω!", reply_markup=get_main_keyboard())
    await set_commands()

@dp.message(Command("end"))
async def end_bot(message: Message):
    if not has_access(message):
        return
    await message.answer("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
    await dp.storage.close()
    await bot.session.close()
    await dp.stop_polling()

@dp.message(Command("reload"))
async def reload_data(message: Message):
    if not has_access(message):
        return
    global apps_data, combos_data
    apps_data = load_data('apps.json')
    combos_data = load_data('combos.json')
    toggle_state.clear()
    await message.answer("–î–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

file_wait = {'type': None}

@dp.message(Command("editapps"))
async def edit_apps(message: Message):
    if not has_access(message):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤.")
        return
    try:
        await message.answer_document(types.FSInputFile(APPS_JSON_PATH), caption="–§–∞–π–ª apps.json –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")

@dp.message(Command("editcombos"))
async def edit_combos(message: Message):
    if not has_access(message):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤.")
        return
    try:
        await message.answer_document(types.FSInputFile(COMBOS_JSON_PATH), caption="–§–∞–π–ª combos.json –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")

@dp.message(Command("saveapps"))
async def wait_for_apps_file(message: Message):
    if not has_access(message):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤.")
        return
    file_wait['type'] = 'apps'
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª apps.json –¥–ª—è –∑–∞–º–µ–Ω—ã.")

@dp.message(Command("savecombos"))
async def wait_for_combos_file(message: Message):
    if not has_access(message):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ñ–∞–π–ª–æ–≤.")
        return
    file_wait['type'] = 'combos'
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª combos.json –¥–ª—è –∑–∞–º–µ–Ω—ã.")

@dp.message(F.document)
async def handle_json_upload(message: Message):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ JSON (–º—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ —É–¥–∞–ª–µ–Ω—ã)."""
    if not has_access(message):
        return
    file = message.document
    if file_wait['type'] in ('apps', 'combos') and file.file_name.endswith('.json'):
        file_type = file_wait['type']
        file_wait['type'] = None
        filename = APPS_JSON_PATH if file_type == 'apps' else COMBOS_JSON_PATH
        try:
            await bot.download(file, destination=filename)
            with open(filename, 'r', encoding='utf-8') as f:
                new_data = json.load(f)
            global apps_data, combos_data
            if file_type == 'apps':
                apps_data = new_data
            else:
                combos_data = new_data
            await message.answer(f"–§–∞–π–ª {filename.name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
        except json.JSONDecodeError as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –≤ JSON —Ñ–∞–π–ª–µ: {e}")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

# ==========================
# –ú–ï–ù–Æ ¬´–ü–†–ò–õ–û–ñ–ï–ù–ò–Ø¬ª
# ==========================

def get_apps_keyboard(page=0):
    builder = InlineKeyboardBuilder()
    items_per_page = 20
    visible_apps = [a for a in apps_data if a.get('show_in_menu', True)]
    start_index = page * items_per_page
    end_index = start_index + items_per_page
    current_apps = visible_apps[start_index:end_index]
    for app in current_apps:
        builder.button(text=app['name'], callback_data=f"app_toggle_{app['key']}")
    builder.adjust(2)
    total_pages = ceil(len(visible_apps) / items_per_page) if visible_apps else 1
    if total_pages > 1:
        prev_page = (page - 1 + total_pages) % total_pages
        next_page = (page + 1) % total_pages
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"app_page_{prev_page}"),
            InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="noop"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"app_page_{next_page}")
        )
    return builder.as_markup()

@dp.message(F.text == "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
async def show_apps(message: Message):
    if not has_access(message):
        return
    if not apps_data:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ `apps.json`.")
        return
    user_data['apps_page'] = 0
    sent_message = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=get_apps_keyboard(user_data['apps_page']))
    user_id = message.from_user.id
    category = 'apps'
    if user_id not in active_inline_menus:
        active_inline_menus[user_id] = {'apps': [], 'combos': [], 'media': []}
    active_inline_menus[user_id][category].append(sent_message.message_id)
    if len(active_inline_menus[user_id][category]) > 2:
        oldest_msg_id = active_inline_menus[user_id][category].pop(0)
        try:
            await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=oldest_msg_id, reply_markup=None)
        except aiogram.exceptions.TelegramBadRequest:
            pass

@dp.callback_query(F.data.startswith("app_page_"))
async def process_app_page(callback: CallbackQuery):
    page = int(callback.data[len("app_page_" ):])
    user_data['apps_page'] = page
    try:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=get_apps_keyboard(page))
        user_id = callback.from_user.id
        category = 'apps'
        current_msg_id = callback.message.message_id
        if user_id in active_inline_menus and current_msg_id not in active_inline_menus[user_id][category]:
            active_inline_menus[user_id][category].append(current_msg_id)
            if len(active_inline_menus[user_id][category]) > 2:
                oldest_msg_id = active_inline_menus[user_id][category].pop(0)
                try:
                    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=oldest_msg_id, reply_markup=None)
                except aiogram.exceptions.TelegramBadRequest:
                    pass
    except aiogram.exceptions.TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logging.warning(f"TelegramBadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")
    await callback.answer()

def _as_list(val):
    if val is None:
        return []
    if isinstance(val, list):
        return val
    if isinstance(val, str) and val.strip():
        return [val]
    return []

def _is_url(s: str) -> bool:
    return bool(re.match(r'^(https?|steam|tg)://', s, re.IGNORECASE))

def _resolve_path(p: str) -> str:
    pp = Path(p)
    return str(pp if pp.is_absolute() else (APP_DIR / pp))

def _open_with_shell(path: str):
    os.startfile(path)

def _run_exe(path: str, args: List[str]):
    subprocess.Popen([path] + args, shell=False)

@dp.callback_query(F.data.startswith("app_toggle_"))
async def toggle_app(callback: CallbackQuery):
    key = callback.data[len("app_toggle_"):]
    app_info = next((app for app in apps_data if app['key'] == key and app.get('show_in_menu', True)), None)
    if not app_info:
        await callback.answer("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
        return

    # 0) Steam –ø–æ appid
    steam_appid = app_info.get('steam_appid')
    if steam_appid:
        try:
            _open_with_shell(f"steam://rungameid/{steam_appid}")
            await callback.answer()
            return
        except Exception as e:
            await callback.answer(f"Steam –æ—à–∏–±–∫–∞: {e}", show_alert=True)
            return

    path = str(app_info.get('path', '')).strip()
    args = _as_list(app_info.get('args')) or _as_list(app_info.get('arg'))
    is_app = str(app_info.get('is_app', 'y')).lower()

    # 1) –Ø–≤–Ω—ã–π steam:// / tg:// / http(s)://
    if _is_url(path):
        try:
            _open_with_shell(path)
            await callback.answer()
            return
        except Exception as e:
            # –°–ø–µ—Ü-fallback: Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Üí –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            if path.lower().startswith("tg://"):
                try:
                    _open_with_shell("https://desktop.telegram.org")
                    await callback.answer("Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –æ—Ç–∫—Ä—ã–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
                    return
                except Exception as e2:
                    await callback.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è Telegram: {e2}", show_alert=True)
                    return
            await callback.answer(f"–û—à–∏–±–∫–∞ URL: {e}", show_alert=True)
            return

    # 2) .url —è—Ä–ª—ã–∫?
    if path.lower().endswith(".url"):
        try:
            _open_with_shell(_resolve_path(path))
            await callback.answer()
            return
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ —è—Ä–ª—ã–∫–∞: {e}", show_alert=True)
            return

    # 3) –û–±—ã—á–Ω—ã–π EXE/—Ñ–∞–π–ª
    resolved = _resolve_path(path)

    if is_app == 'n':
        try:
            if resolved.lower().endswith(".exe") and args:
                _run_exe(resolved, args)
            else:
                _open_with_shell(resolved)
            await callback.answer()
            return
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", show_alert=True)
            return

    # is_app == 'y' ‚Üí –ø–æ–∫–∞–∑–∞—Ç—å/—Å–≤–µ—Ä–Ω—É—Ç—å (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ), –∏–Ω–∞—á–µ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å
    state = toggle_state.get(key, 'minimized')
    try:
        if state == 'minimized':
            try:
                if not activate_app_window(app_info):
                    if resolved.lower().endswith(".exe"):
                        _run_exe(resolved, args)
                    else:
                        _open_with_shell(resolved)
            except Exception:
                _open_with_shell(resolved)
            toggle_state[key] = 'shown'
            await callback.answer()
        else:
            try:
                minimize_app_window(app_info)
            except Exception:
                pass
            toggle_state[key] = 'minimized'
            await callback.answer()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)

    try:
        await callback.message.edit_reply_markup(reply_markup=get_apps_keyboard(user_data['apps_page']))
    except aiogram.exceptions.TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logging.warning(f"TelegramBadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {e}")

def activate_app_window(app_info):
    exe_name = app_info.get('exe') or app_info.get('path', '').split('\\')[-1]
    pids = [p.info['pid'] for p in psutil.process_iter(['pid', 'name'])
            if p.info['name'] and exe_name.lower() in p.info['name'].lower()]
    if not pids:
        return False
    for pid in pids:
        def callback(hwnd, _):
            _, found_pid = win32process.GetWindowThreadProcessId(hwnd)
            if found_pid == pid and win32gui.IsWindowVisible(hwnd):
                win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)
                try:
                    win32gui.SetForegroundWindow(hwnd)
                except Exception:
                    pass
                return False
            return True
        win32gui.EnumWindows(callback, None)
    return True

def minimize_app_window(app_info):
    exe_name = app_info.get('exe') or app_info.get('path', '').split('\\')[-1]
    pids = [p.info['pid'] for p in psutil.process_iter(['pid', 'name'])
            if p.info['name'] and exe_name.lower() in p.info['name'].lower()]
    if not pids:
        return False
    for pid in pids:
        def callback(hwnd, _):
            _, found_pid = win32process.GetWindowThreadProcessId(hwnd)
            if found_pid == pid:
                win32gui.ShowWindow(hwnd, win32con.SW_MINIMIZE)
                return False
            return True
        win32gui.EnumWindows(callback, None)
    return True

# ==========================
# –ú–ï–ù–Æ ¬´–ö–û–ú–ë–ò–ù–ê–¶–ò–ò¬ª
# ==========================

def get_combos_keyboard(page=0):
    builder = InlineKeyboardBuilder()
    items_per_page = 20
    visible_combos = [c for c in combos_data if c.get('show_in_menu', True)]
    start_index = page * items_per_page
    end_index = start_index + items_per_page
    current_combos = visible_combos[start_index:end_index]
    for combo in current_combos:
        builder.button(text=combo['name'], callback_data=f"combo_run_{combo['key']}")
    builder.adjust(2)
    total_pages = ceil(len(visible_combos) / items_per_page) if visible_combos else 1
    if total_pages > 1:
        prev_page = (page - 1 + total_pages) % total_pages
        next_page = (page + 1) % total_pages
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"combo_page_{prev_page}"),
            InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="noop"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"combo_page_{next_page}")
        )
    return builder.as_markup()

@dp.message(F.text == "‚å®Ô∏è –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏")
async def show_combos(message: Message):
    if not has_access(message):
        return
    if not combos_data:
        await message.answer("–°–ø–∏—Å–æ–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ `combos.json`.")
        return
    user_data['combos_page'] = 0
    sent_message = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é:", reply_markup=get_combos_keyboard(user_data['combos_page']))
    user_id = message.from_user.id
    category = 'combos'
    if user_id not in active_inline_menus:
        active_inline_menus[user_id] = {'apps': [], 'combos': [], 'media': []}
    active_inline_menus[user_id][category].append(sent_message.message_id)
    if len(active_inline_menus[user_id][category]) > 2:
        oldest_msg_id = active_inline_menus[user_id][category].pop(0)
        try:
            await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=oldest_msg_id, reply_markup=None)
        except aiogram.exceptions.TelegramBadRequest:
            pass

@dp.callback_query(F.data.startswith("combo_page_"))
async def process_combo_page(callback: CallbackQuery):
    page = int(callback.data[len("combo_page_"):])
    user_data['combos_page'] = page
    try:
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é:", reply_markup=get_combos_keyboard(page))
        user_id = callback.from_user.id
        category = 'combos'
        current_msg_id = callback.message.message_id
        if user_id in active_inline_menus and current_msg_id not in active_inline_menus[user_id][category]:
            active_inline_menus[user_id][category].append(current_msg_id)
            if len(active_inline_menus[user_id][category]) > 2:
                oldest_msg_id = active_inline_menus[user_id][category].pop(0)
                try:
                    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=oldest_msg_id, reply_markup=None)
                except aiogram.exceptions.TelegramBadRequest:
                    pass
    except aiogram.exceptions.TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            logging.warning(f"TelegramBadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {e}")
    await callback.answer()

def save_config_setting(section, key, value):
    try:
        config.set(section, key, str(value))
        with open(CONFIG_PATH, 'w', encoding='utf-8') as configfile:
            config.write(configfile)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {section}.{key} –≤ config.ini: {e}")

# ===== –°–ø–µ—Ü-—É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞ (Xbox Game Bar) =====

def _videos_dirs() -> List[Path]:
    # –ù–∞ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö Windows –ø—É—Ç—å –æ—Å—Ç–∞—ë—Ç—Å—è "Videos", –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è ‚Äî ¬´–í–∏–¥–µ–æ¬ª
    candidates = [
        Path.home() / "Videos",
        Path.home() / "–í–∏–¥–µ–æ"
    ]
    return [p for p in candidates if p.exists()]

def _captures_dirs() -> List[Path]:
    out = []
    subs = ["Captures", "–ö–ª–∏–ø—ã", "Game Clips", "–ò–≥—Ä–æ–≤—ã–µ –∫–ª–∏–ø—ã"]
    for vd in _videos_dirs():
        for sub in subs:
            p = vd / sub
            if p.exists():
                out.append(p)
        # –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –∫–ª–∏–ø—ã –ø–∏—à—É—Ç—Å—è –ø—Ä—è–º–æ –≤ Videos
        out.append(vd)
    # –£–Ω–∏–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞
    unique = []
    seen = set()
    for p in out:
        if str(p) not in seen:
            seen.add(str(p)); unique.append(p)
    return unique

def _find_latest_clip(since_ts: float) -> Optional[Path]:
    exts = {'.mp4', '.mov', '.mkv', '.avi'}
    newest: tuple[float, Path] | None = None
    for d in _captures_dirs():
        try:
            for f in d.glob("*"):
                if f.is_file() and f.suffix.lower() in exts:
                    mtime = f.stat().st_mtime
                    # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–∑–æ—Ä –Ω–∞–∑–∞–¥ ‚Äî —á—Ç–æ–±—ã —É—á–µ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
                    if mtime >= since_ts - 60:
                        if newest is None or mtime > newest[0]:
                            newest = (mtime, f)
        except Exception:
            continue
    return newest[1] if newest else None

# ===== –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π =====

@dp.callback_query(F.data.startswith("combo_run_"))
async def run_combo(callback: CallbackQuery):
    key = callback.data[len("combo_run_"):]
    combo_info = next((c for c in combos_data if c['key'] == key), None)
    if not combo_info:
        await callback.answer("–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    await callback.answer()
    try:
        # –°–ø–µ—Ü-–≤–µ—Ç–∫–∏
        if key == "screenshot":
            screenshot = pyautogui.screenshot()
            screenshot_path = APP_DIR / "screenshot.png"
            screenshot.save(screenshot_path)
            await bot.send_photo(chat_id=callback.from_user.id, photo=FSInputFile(screenshot_path))
            os.remove(screenshot_path)
            await callback.message.answer("–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            return

        if key == "screen_rec":
            # –¢–æ–≥–≥–ª –∑–∞–ø–∏—Å–∏ Xbox Game Bar (Win+Alt+R).
            if not record_state['active']:
                pyautogui.hotkey('winleft', 'alt', 'r')
                record_state['active'] = True
                record_state['started_at'] = time.time()
                await callback.message.answer("üé• –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞ (Win+Alt+R). –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç –∑–∞–ø–∏—Å—å.")
            else:
                pyautogui.hotkey('winleft', 'alt', 'r')
                record_state['active'] = False
                # –î–∞–¥–∏–º —Å–∏—Å—Ç–µ–º–µ –¥–æ–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª
                await asyncio.sleep(2.0)
                clip = _find_latest_clip(record_state['started_at'])
                user_id = callback.from_user.id
                last_clip_by_user[user_id] = clip
                if clip and clip.exists():
                    kb = InlineKeyboardBuilder()
                    kb.button(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram", callback_data="send_last_clip_yes")
                    kb.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–∞–ø–∫–µ", callback_data="send_last_clip_no")
                    kb.adjust(1, 1)
                    human_path = str(clip)
                    await callback.message.answer(
                        f"üü¢ –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n–ù–∞—à—ë–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª–∏–ø:\n<code>{human_path}</code>\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram?",
                        reply_markup=kb.as_markup(),
                        parse_mode="HTML"
                    )
                else:
                    # –ù–µ –Ω–∞—à–ª–∏ –∫–ª–∏–ø ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º, –≥–¥–µ –∏—Å–∫–∞—Ç—å
                    dirs = _captures_dirs()
                    hint = "\n".join(str(d) for d in dirs) if dirs else "(–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–ø–∫—É –∫–ª–∏–ø–æ–≤)"
                    await callback.message.answer(
                        "üü° –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É –∫–ª–∏–ø–æ–≤:\n{hint}"
                    )
            return

        if combo_info.get('type') == 'batch' and 'path' in combo_info:
            full_path = APP_DIR / combo_info['path']
            ext = full_path.suffix.lower()
            if ext in ['.bat', '.cmd']:
                subprocess.Popen(["cmd.exe", "/c", "start", "", str(full_path)], shell=True)
            elif ext == '.ps1':
                subprocess.Popen(["powershell.exe", "-NoProfile", "-ExecutionPolicy", "Bypass", "-File", str(full_path)], shell=True)
            elif ext == '.py':
                subprocess.Popen(["cmd.exe", "/c", "start", "", "python", str(full_path)], shell=True)
            else:
                subprocess.Popen(["cmd.exe", "/c", "start", "", str(full_path)], shell=True)
            return

        elif combo_info.get('type') == 'set_search_browser':
            target_key = combo_info.get('target_browser_key')
            app_exists = any(app.get('key') == target_key for app in apps_data)
            if app_exists:
                user_data['preferred_search_browser_key'] = target_key
                save_config_setting('Settings', 'PREFERRED_SEARCH_BROWSER_KEY', target_key)
                browser_name = next((app['name'] for app in apps_data if app['key'] == target_key), target_key)
                await callback.message.answer(f"–í—ã–±—Ä–∞–Ω –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞: {browser_name}. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            else:
                await callback.message.answer("–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π!")
            return

        keys = combo_info.get('keys', [])
        if keys == ["alt_down"]:
            pyautogui.keyDown('alt'); return
        elif keys == ["alt_up"]:
            pyautogui.keyUp('alt'); return
        if keys == ["f"]:
            pyautogui.keyDown('f'); pyautogui.keyUp('f'); return

        if not keys:
            await callback.message.answer("–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –±–µ–∑ –∫–ª–∞–≤–∏—à –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π.")
            return

        layout = combo_info.get('layout', 'none')
        current_layout = get_current_layout()
        switched = False
        if layout != 'none' and layout != current_layout:
            switch_layout(layout); switched = True

        if keys == ['win', 'd']:
            show_desktop_toggle()
        elif 'win' in keys:
            pyautogui.hotkey(*keys)
        else:
            keyboard.send('+'.join(keys))

        if switched:
            switch_layout(current_layout)
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")

# ===== –ö–Ω–æ–ø–∫–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–ø –≤ Telegram / –û—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–∞–ø–∫–µ¬ª =====

@dp.callback_query(F.data == "send_last_clip_yes")
async def send_last_clip_yes(callback: CallbackQuery):
    user_id = callback.from_user.id
    clip = last_clip_by_user.get(user_id)
    if not clip or not clip.exists():
        await callback.answer("–§–∞–π–ª –∫–ª–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    try:
        size_mb = clip.stat().st_size / (1024 * 1024)
        if size_mb > 2000:  # –ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            await callback.message.answer(
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ ({size_mb:.0f} –ú–ë). –û—Å—Ç–∞–≤–ª—è—é –≤ –ø–∞–ø–∫–µ:\n<code>{clip}</code>",
                parse_mode="HTML"
            )
            await callback.answer()
            return
        await bot.send_video(chat_id=user_id, video=FSInputFile(clip), caption=f"üé• –ö–ª–∏–ø: {clip.name}")
        await callback.message.answer("–ì–æ—Ç–æ–≤–æ! –ö–ª–∏–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.")
        await callback.answer()
    except Exception as e:
        await callback.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–ø: {e}")
        await callback.answer()

@dp.callback_query(F.data == "send_last_clip_no")
async def send_last_clip_no(callback: CallbackQuery):
    user_id = callback.from_user.id
    clip = last_clip_by_user.get(user_id)
    if clip:
        await callback.message.answer(f"–û—Å—Ç–∞–≤–∏–ª —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ:\n<code>{clip}</code>", parse_mode="HTML")
    else:
        await callback.message.answer("–û—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –µ—Å—Ç—å. (–§–∞–π–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)")
    await callback.answer()

# ==========================
# –°–ò–°–¢–ï–ú–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø
# ==========================

async def set_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="reload", description="–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON"),
        BotCommand(command="end", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="editapps", description="–ü–æ–∫–∞–∑–∞—Ç—å apps.json"),
        BotCommand(command="saveapps", description="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π apps.json"),
        BotCommand(command="editcombos", description="–ü–æ–∫–∞–∑–∞—Ç—å combos.json"),
        BotCommand(command="savecombos", description="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π combos.json"),
        BotCommand(command="set_search_yandex", description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ø–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞"),
        BotCommand(command="set_search_google", description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Google –¥–ª—è –ø–æ–∏—Å–∫–∞"),
        BotCommand(command="set_search_bing", description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Bing –¥–ª—è –ø–æ–∏—Å–∫–∞")
    ]
    try:
        await bot.delete_my_commands()
        await bot.set_my_commands(commands)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é: {e}")

@dp.callback_query(F.data == "noop")
async def noop_callback(callback: CallbackQuery):
    await callback.answer()

@dp.message(Command("set_search_yandex"))
async def set_search_yandex(message: Message):
    if not has_access(message): return
    user_data['search_engine'] = 'yandex'
    save_config_setting('Settings', 'DEFAULT_SEARCH_ENGINE', 'yandex')
    await message.answer("–í—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫–æ–≤–∏–∫: –Ø–Ω–¥–µ–∫—Å. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

@dp.message(Command("set_search_google"))
async def set_search_google(message: Message):
    if not has_access(message): return
    user_data['search_engine'] = 'google'
    save_config_setting('Settings', 'DEFAULT_SEARCH_ENGINE', 'google')
    await message.answer("–í—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫–æ–≤–∏–∫: Google. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

@dp.message(Command("set_search_bing"))
async def set_search_bing(message: Message):
    if not has_access(message): return
    user_data['search_engine'] = 'bing'
    save_config_setting('Settings', 'DEFAULT_SEARCH_ENGINE', 'bing')
    await message.answer("–í—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫–æ–≤–∏–∫: Bing. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

# ==========================
# –ö–õ–ê–í–ò–ê–¢–£–†–ù–ê–Ø –†–ê–°–ö–õ–ê–î–ö–ê / –ì–†–û–ú–ö–û–°–¢–¨ / –ú–ï–î–ò–ê-–ö–õ–ê–í–ò–®–ò
# ==========================

LANGS = {'en': 0x409, 'ru': 0x419}

def get_current_layout():
    user32 = ctypes.WinDLL('user32', use_last_error=True)
    hwnd = user32.GetForegroundWindow()
    thread_id = user32.GetWindowThreadProcessId(hwnd, 0)
    layout_id = user32.GetKeyboardLayout(thread_id)
    lang = layout_id & 0xFFFF
    if lang == LANGS['en']:
        return 'en'
    elif lang == LANGS['ru']:
        return 'ru'
    else:
        return 'unknown'

def switch_layout(target):
    user32 = ctypes.WinDLL('user32', use_last_error=True)
    hwnd = user32.GetForegroundWindow()
    n = user32.GetKeyboardLayoutList(0, None)
    buf = (ctypes.c_ulong * n)()
    user32.GetKeyboardLayoutList(n, buf)
    target_hkl = None
    for hkl in buf:
        if (hkl & 0xFFFF) == LANGS[target]:
            target_hkl = hkl
            break
    if target_hkl:
        user32.ActivateKeyboardLayout(target_hkl, 0)
        time.sleep(0.1)

def volume_up():
    VK_VOLUME_UP = 0xAF
    user32 = ctypes.WinDLL('user32', use_last_error=True)
    user32.keybd_event(VK_VOLUME_UP, 0, 0, 0)
    user32.keybd_event(VK_VOLUME_UP, 0, 2, 0)

def volume_down():
    VK_VOLUME_DOWN = 0xAE
    user32 = ctypes.WinDLL('user32', use_last_error=True)
    user32.keybd_event(VK_VOLUME_DOWN, 0, 0, 0)
    user32.keybd_event(VK_VOLUME_DOWN, 0, 2, 0)

def volume_mute():
    VK_VOLUME_MUTE = 0xAD
    user32 = ctypes.WinDLL('user32', use_last_error=True)
    user32.keybd_event(VK_VOLUME_MUTE, 0, 0, 0)
    user32.keybd_event(VK_VOLUME_MUTE, 0, 2, 0)

def media_play_pause():
    VK_MEDIA_PLAY_PAUSE = 0xB3
    user32 = ctypes.WinDLL('user32', use_last_error=True)
    user32.keybd_event(VK_MEDIA_PLAY_PAUSE, 0, 0, 0)
    user32.keybd_event(VK_MEDIA_PLAY_PAUSE, 0, 2, 0)

def media_next():
    VK_MEDIA_NEXT_TRACK = 0xB0
    user32 = ctypes.WinDLL('user32', use_last_error=True)
    user32.keybd_event(VK_MEDIA_NEXT_TRACK, 0, 0, 0)
    user32.keybd_event(VK_MEDIA_NEXT_TRACK, 0, 2, 0)

def media_prev():
    VK_MEDIA_PREV_TRACK = 0xB1
    user32 = ctypes.WinDLL('user32', use_last_error=True)
    user32.keybd_event(VK_MEDIA_PREV_TRACK, 0, 0, 0)
    user32.keybd_event(VK_MEDIA_PREV_TRACK, 0, 2, 0)

def show_desktop_toggle():
    try:
        subprocess.run(
            ['powershell', '-Command', '(New-Object -ComObject Shell.Application).MinimizeAll()'],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
    except Exception as e:
        logging.error(f"Win+D via PowerShell error: {e}")

# ==========================
# –ü–†–û–ß–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø / –ü–û–ò–°–ö
# ==========================

@dp.message()
async def handle_other_messages(message: Message):
    if not has_access(message):
        return
    text = message.text or ""
    url_match = re.search(r'(https?://\S+)', text)
    if url_match:
        url = url_match.group(1)
        try:
            os.startfile(url)
            await message.reply(f"–°—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {url}")
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏: {e}")
        return
    if text.strip() and not text.startswith('/'):
        search_engine_key = user_data.get('search_engine', 'google')
        search_template = SEARCH_ENGINES.get(search_engine_key, SEARCH_ENGINES['google'])
        query_encoded = urllib.parse.quote_plus(text)
        search_url = f"{search_template}{query_encoded}"
        preferred_browser_key = user_data.get('preferred_search_browser_key')
        if preferred_browser_key:
            browser_app_info = next((app for app in apps_data if app['key'] == preferred_browser_key), None)
            if browser_app_info and str(browser_app_info.get('is_app','y')).lower() == 'y':
                browser_path = _resolve_path(browser_app_info['path'])
                browser_args = _as_list(browser_app_info.get('args')) or _as_list(browser_app_info.get('arg'))
                try:
                    subprocess.Popen([browser_path] + browser_args + [search_url], shell=False)
                    await message.reply(f"–ò—â—É –≤ {browser_app_info['name']}: {text}")
                    return
                except Exception as e:
                    await message.reply(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ {browser_app_info['name']}: {e}. –û—Ç–∫—Ä—ã–≤–∞—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                    user_data['preferred_search_browser_key'] = None
                    save_config_setting('Settings', 'PREFERRED_SEARCH_BROWSER_KEY', '')
        try:
            os.startfile(search_url)
            await message.reply(f"–ò—â—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {text}")
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")

# ==========================
# –ó–ê–ü–£–°–ö –ü–û–õ–õ–ò–ù–ì–ê
# ==========================

async def main():
    await set_commands()
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
